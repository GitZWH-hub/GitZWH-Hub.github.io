<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XANDER</title>
  
  <subtitle>何其荣幸</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-07-28T07:48:14.387Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Xander</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>上开大第三周记录</title>
    <link href="http://example.com/2021/07/23/%E5%BC%80%E5%A4%A7%E7%AC%AC%E4%B8%89%E5%91%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2021/07/23/%E5%BC%80%E5%A4%A7%E7%AC%AC%E4%B8%89%E5%91%A8%E8%AE%B0%E5%BD%95/</id>
    <published>2021-07-23T06:05:25.851Z</published>
    <updated>2021-07-28T07:48:14.387Z</updated>
    
    <content type="html"><![CDATA[<p>本周学习内容有：Vue前端深度学习、后台修改</p><h3 id="知识点及问题整理"><a href="#知识点及问题整理" class="headerlink" title="知识点及问题整理"></a>知识点及问题整理</h3><p><strong>(1) Object.assign()</strong><br>对象的拷贝与合并（深？浅？）<br><strong>(2) 问题：表中存在所查询数据，但查询字段返回为null</strong><br>原因：数据库中的字段名为使用下划线连接，所以对应的实体类应该是驼峰命名方式，但实际类中采用的下划线连接，所以queryWrapper映射不到。<br>解决方法：1. 修改map-underscore-to-camel-case: false   2. 或者将实体类命名改为驼峰方式<br>按道理应该可以解决,且确实解决了查询为null的问题。<br>最终解决：修改了数据库表的列名<br><strong>(3) vue前端查看日志</strong><br>用Google Chrome来运行，找到开发者模式，可以查看</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.console.log(要查看内容)</span><br></pre></td></tr></table></figure><p><strong>(4) baseMapper.selectOne(queryWrapper)的使用</strong><br>前提：已知只有一条记录才可以使用<br><strong>(5) (Java后端)queryWrapper的代码使用(在第一周记录里已有简单介绍)</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public PageResult&lt;Message&gt; demand(MessageParam MsgParam)&#123;</span><br><span class="line">    QueryWrapper&lt;Message&gt; queryWrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line">    System.out.println(MsgParam);</span><br><span class="line">    if (ObjectUtil.isNotNull(MsgParam)) &#123;</span><br><span class="line">        // 根据名称 查询</span><br><span class="line">        if (ObjectUtil.isNotEmpty(MsgParam.getName())) &#123;</span><br><span class="line">            queryWrapper.lambda().eq(Message::getName, MsgParam.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        // 根据地址模糊 查询</span><br><span class="line">        if (ObjectUtil.isNotEmpty(MsgParam.getAddress())) &#123;</span><br><span class="line">            queryWrapper.lambda().like(Message::getAddress, MsgParam.getAddress());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return new PageResult&lt;&gt;(this.page(PageFactory.defaultPage(), queryWrapper));</span><br><span class="line">&#125;</span><br><span class="line">//另外，如果已知只有一条数据，也可以直接返回Message，        </span><br><span class="line">//使用selectOne的前提是：已经知道只有一条记录的前提</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    Message msg = baseMapper.selectOne(queryWrapper);</span><br><span class="line">    return msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>(6) label的使用</strong><br>如果label是做查询条件，使用v-model</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a-form-item</span><br><span class="line">    label=&quot;Name&quot;</span><br><span class="line">    :labelCol=&quot;labelCol&quot;</span><br><span class="line">    :wrapperCol=&quot;wrapperCol&quot;</span><br><span class="line">    has-feedback</span><br><span class="line">&gt;</span><br><span class="line">    &lt;a-input placeholder=&quot;Enter name&quot; v-model=&quot;queryParam.name&quot; /&gt;</span><br><span class="line">&lt;/a-form-item&gt;</span><br></pre></td></tr></table></figure><p>v-model跟v-decorator不能同时使用<br><strong>(7) vue表格</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 列表添加 --&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;a-card :bordered=&quot;false&quot;&gt;</span><br><span class="line">    &lt;s-table</span><br><span class="line">      ref=&quot;table&quot;</span><br><span class="line">      :columns=&quot;columns&quot;</span><br><span class="line">      :data=&quot;loadData&quot;</span><br><span class="line">      :rowKey=&quot;(record) =&gt; record.id&quot;</span><br><span class="line">      bordered</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;/s-table&gt;</span><br><span class="line">  &lt;/a-card&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>data()：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//查询参数</span><br><span class="line">queryParam: &#123;&#125;,</span><br><span class="line">//列名参数</span><br><span class="line">columns: [</span><br><span class="line">   &#123;</span><br><span class="line">      title: &#x27;Name&#x27;,</span><br><span class="line">      align: &#x27;center&#x27;,</span><br><span class="line">      dataIndex: &#x27;name&#x27;</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">      title: &#x27;Address&#x27;,</span><br><span class="line">      align: &#x27;center&#x27;,</span><br><span class="line">      dataIndex: &#x27;address&#x27;</span><br><span class="line">   &#125;</span><br><span class="line">],</span><br><span class="line">tstyle: &#123; &#x27;padding-bottom&#x27;: &#x27;0px&#x27;, &#x27;margin-bottom&#x27;: &#x27;10px&#x27; &#125;,</span><br><span class="line">// 加载数据方法 必须为 Promise 对象</span><br><span class="line">loadData: parameter =&gt; &#123;</span><br><span class="line">return MsgDemand(Object.assign(parameter, this.tojason())).then((res) =&gt; &#123;</span><br><span class="line">    return res.data</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">tojason()&#123;</span><br><span class="line">    const obj = JSON.parse(JSON.stringify(this.queryParam))</span><br><span class="line">    return obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="至此，已经可以实现"><a href="#至此，已经可以实现" class="headerlink" title="至此，已经可以实现"></a>至此，已经可以实现</h3><p><strong>(1) 修改前端界面，并将数据传递给后端并保存到数据库</strong><br><strong>(2) 根据条件查询后台，并返回给前端显示，(支持多条件、不同条件查询)</strong><br>A: 查询全部<br><img src="https://yzhangwh-1253708708.cos.ap-shanghai.myqcloud.com/%E5%BC%80%E5%A4%A7%E4%B8%89%E5%91%A8%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95/Demand%20All.png"><br>B: 单条件查询<br><img src="https://yzhangwh-1253708708.cos.ap-shanghai.myqcloud.com/%E5%BC%80%E5%A4%A7%E4%B8%89%E5%91%A8%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95/Demand%20OneCon.png"><br>C: 多条件查询<br><img src="https://yzhangwh-1253708708.cos.ap-shanghai.myqcloud.com/%E5%BC%80%E5%A4%A7%E4%B8%89%E5%91%A8%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95/Demand%20MoreCon.png"><br>D: 模糊条件查询<br><img src="https://yzhangwh-1253708708.cos.ap-shanghai.myqcloud.com/%E5%BC%80%E5%A4%A7%E4%B8%89%E5%91%A8%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95/Demand%20LIKE.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本周学习内容有：Vue前端深度学习、后台修改&lt;/p&gt;
&lt;h3 id=&quot;知识点及问题整理&quot;&gt;&lt;a href=&quot;#知识点及问题整理&quot; class=&quot;headerlink&quot; title=&quot;知识点及问题整理&quot;&gt;&lt;/a&gt;知识点及问题整理&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;(1) Obje</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>上开大第二周记录</title>
    <link href="http://example.com/2021/07/22/%E5%BC%80%E5%A4%A7%E7%AC%AC%E4%BA%8C%E5%91%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2021/07/22/%E5%BC%80%E5%A4%A7%E7%AC%AC%E4%BA%8C%E5%91%A8%E8%AE%B0%E5%BD%95/</id>
    <published>2021-07-22T02:40:54.245Z</published>
    <updated>2021-07-23T06:05:25.852Z</updated>
    
    <content type="html"><![CDATA[<p>本周学习内容有：选课系统本地环境部署搭建、尝试开发</p><h2 id="1-服务搭建"><a href="#1-服务搭建" class="headerlink" title="1. 服务搭建"></a>1. 服务搭建</h2><h3 id="1-所需软件"><a href="#1-所需软件" class="headerlink" title="(1) 所需软件"></a>(1) 所需软件</h3><p><strong>A、 IntelliJ Idea: “用于Java后台和前端vue开发”</strong><br><strong>B、 Redis:  “一款内存高速缓存数据库, 支持key-value等多种数据结构”</strong><br>Redis特点：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1)由于以内存作为存储介质，读写数据效率极高</span><br><span class="line">(2)redis跟内存不同的是：储存在redis中的数据是持久化的，断电也不会丢失</span><br><span class="line">(3)redis存储分为内存存储、磁盘存储和log存储</span><br><span class="line">(4)redis可以从磁盘将数据重新加载到内存，因此才实现持久化</span><br><span class="line">但Redis适合的场景主要局限在较小数据量的高性能操作和运算上。</span><br></pre></td></tr></table></figure><p>Redis应用场景：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">因为redis交换数据快，在服务器中常用来存储一些需要频繁调用的数据，节省内存开销，也极大地提升了速度</span><br><span class="line">(1)会话缓存（最常用）</span><br><span class="line">(2)消息队列（支付）</span><br><span class="line">(3)发布、订阅消息（消息通知）</span><br><span class="line">(4)商品列表、评论列表</span><br></pre></td></tr></table></figure><p>Redis一共支持五种数据类型：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String（字符串）、hash（哈希）、list（列表）、set（集合）和zset（sorted  set有序集合）</span><br></pre></td></tr></table></figure><p><strong>C、 Node.js: “是一种通过JavaScript语言开发web服务端的东西”</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">特性：非阻塞、事件驱动IO</span><br><span class="line">非阻塞：将服务器想像成一个loop循环，loop会一直跑下去。一个新的请求来了，loop就接受这个请求，把请求传递给其他进程，如查询数据库的进程，并响应一个回掉。完事了loop接着跑，接其他的请求。这样服务器就不会傻等着接数据库返回的结果。</span><br><span class="line">事件驱动：从理论上说，这样同一时刻的数据库查询数量，以及用户的请求数量就没有限制了。服务器只在用户那边有事件发生的时候才响应，这就是事件驱动。</span><br></pre></td></tr></table></figure><p><strong>D、 Vue前端</strong><br><strong>E、 MySql数据库</strong></p><h3 id="2-配置过程"><a href="#2-配置过程" class="headerlink" title="(2) 配置过程"></a>(2) 配置过程</h3><p><strong>数据库导入本地</strong><br><strong>后端服务启动顺序</strong><br>(1)SundeNacosApp (2)SundeActuatorApp (3)SundeGatewayApp (4)SundeMainApp<br><strong>vue服务启动</strong><br>cd到前端代码的_web文件夹下，执行以下命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># npm run serve</span><br></pre></td></tr></table></figure><p>为方便起见，本地编辑shell脚本vue.sh<br><strong>本地访问验证<a href="http://localhost:9000/">local</a></strong><br><strong>遇到的问题及解决办法</strong><br>(1) 编译<br>Maven (root)下，先clean再compile<br>(2) 编译过程中遇到缺少某个<br>双击进入代码文件，定位后点击母模块，进行Build，再重新compile<br>(3) 连接数据库出错<br>修改配置文件，连接本地</p><h2 id="2-上手开发情况"><a href="#2-上手开发情况" class="headerlink" title="2. 上手开发情况"></a>2. 上手开发情况</h2><p>目前，已经可以在前端修改界面，发送Data到后台服务，并存储到本地MySql数据库。<br>在【假期设置】菜单中添加Button【Send Message】，如图1：<br><img src="https://yzhangwh-1253708708.cos.ap-shanghai.myqcloud.com/%E5%BC%80%E5%A4%A7%E4%BA%8C%E5%91%A8%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95/%E9%80%89%E8%AF%BE1.png"></p><center>图1</center><p>点击按钮，弹出对话框Form，编辑信息，如图2：<br><img src="https://yzhangwh-1253708708.cos.ap-shanghai.myqcloud.com/%E5%BC%80%E5%A4%A7%E4%BA%8C%E5%91%A8%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95/%E9%80%89%E8%AF%BE2.png"></p><center>图2</center><p>点击确定，发送message给后端，并保存到了本地数据库，如图3：<br><img src="https://yzhangwh-1253708708.cos.ap-shanghai.myqcloud.com/%E5%BC%80%E5%A4%A7%E4%BA%8C%E5%91%A8%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95/%E9%80%89%E8%AF%BE3.png"></p><center>图3</center>也添加了点击按钮【Go to Major Page】跳转菜单，计划跳转界面并携带数据<p>弹出框（下面代码效果为上图2）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;a-modal</span><br><span class="line">    title=&quot;Send Message&quot;</span><br><span class="line">    :width=&quot;1000&quot;</span><br><span class="line">    :visible=&quot;visible&quot;</span><br><span class="line">    :confirmLoading=&quot;confirmLoading&quot;</span><br><span class="line">    @ok=&quot;handleSubmit&quot;</span><br><span class="line">    @cancel=&quot;handleCancel&quot;</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;a-spin :spinning=&quot;confirmLoading&quot;&gt;</span><br><span class="line">      &lt;a-form :form=&quot;form&quot;&gt;</span><br><span class="line">        &lt;a-form-item</span><br><span class="line">          label=&quot;Name&quot;</span><br><span class="line">          :labelCol=&quot;labelCol&quot;</span><br><span class="line">          :wrapperCol=&quot;wrapperCol&quot;</span><br><span class="line">          has-feedback</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;a-input placeholder=&quot;Enter your name&quot; v-decorator=&quot;[&#x27;s_name&#x27;]&quot; /&gt;</span><br><span class="line">        &lt;/a-form-item&gt;</span><br><span class="line">        &lt;a-form-item</span><br><span class="line">          label=&quot;Age&quot;</span><br><span class="line">          :labelCol=&quot;labelCol&quot;</span><br><span class="line">          :wrapperCol=&quot;wrapperCol&quot;</span><br><span class="line">          has-feedback</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;a-input placeholder=&quot;Enter your age&quot; v-decorator=&quot;[&#x27;s_age&#x27;]&quot; /&gt;</span><br><span class="line">        &lt;/a-form-item&gt;</span><br><span class="line">        &lt;a-form-item</span><br><span class="line">          label=&quot;Address&quot;</span><br><span class="line">          :labelCol=&quot;labelCol&quot;</span><br><span class="line">          :wrapperCol=&quot;wrapperCol&quot;</span><br><span class="line">          has-feedback</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;a-input placeholder=&quot;Enter your address&quot; v-decorator=&quot;[&#x27;s_address&#x27;]&quot; /&gt;</span><br><span class="line">        &lt;/a-form-item&gt;</span><br><span class="line"></span><br><span class="line">        &lt;a-button type=&quot;primary&quot; v-if=&quot;hasPerm(&#x27;kdHoliday:modify&#x27;)&quot; icon=&quot;plus&quot; @click=&quot;close&quot;&gt;Go to Major Page&lt;/a-button&gt;</span><br><span class="line">        </span><br><span class="line">      &lt;/a-form&gt;</span><br><span class="line">    &lt;/a-spin&gt;</span><br><span class="line">  &lt;/a-modal&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本周学习内容有：选课系统本地环境部署搭建、尝试开发&lt;/p&gt;
&lt;h2 id=&quot;1-服务搭建&quot;&gt;&lt;a href=&quot;#1-服务搭建&quot; class=&quot;headerlink&quot; title=&quot;1. 服务搭建&quot;&gt;&lt;/a&gt;1. 服务搭建&lt;/h2&gt;&lt;h3 id=&quot;1-所需软件&quot;&gt;&lt;a hre</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>上开大第一周记录</title>
    <link href="http://example.com/2021/07/20/%E5%BC%80%E5%A4%A7%E7%AC%AC%E4%B8%80%E5%91%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2021/07/20/%E5%BC%80%E5%A4%A7%E7%AC%AC%E4%B8%80%E5%91%A8%E8%AE%B0%E5%BD%95/</id>
    <published>2021-07-20T07:01:14.652Z</published>
    <updated>2021-07-22T02:40:54.246Z</updated>
    
    <content type="html"><![CDATA[<p>在研究生开学之前，来到上开大进行实习以充实提高自己。记录一下这一个周的学习情况。</p><h2 id="1-项目介绍"><a href="#1-项目介绍" class="headerlink" title="1. 项目介绍"></a>1. 项目介绍</h2><p>项目名称：上开大教师选课系统<br>项目架构：SpringCloud微服务<br>使用对象：后勤管理人员<br>项目目的：帮助不同教师选课，满足其不同需求（合并班级、选课时间、地点等）<br><img src="https://yzhangwh-1253708708.cos.ap-shanghai.myqcloud.com/%E5%BC%80%E5%A4%A7%E4%B8%80%E5%91%A8%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95/%E9%80%89%E8%AF%BE1.png"><br>该项目使用的<a href="https://doc.xiaonuo.vip/">小诺</a>原型，可本地部署</p><h2 id="2-其它"><a href="#2-其它" class="headerlink" title="2. 其它"></a>2. 其它</h2><h4 id="BeanUtil-copyProperties-对象A-对象B"><a href="#BeanUtil-copyProperties-对象A-对象B" class="headerlink" title="BeanUtil.copyProperties(对象A, 对象B)"></a>BeanUtil.copyProperties(对象A, 对象B)</h4><p>作用：进行对象间属性的赋值，避免get、set，把对象A的属性赋值给对象B</p><h4 id="Maven：项目管理工具"><a href="#Maven：项目管理工具" class="headerlink" title="Maven：项目管理工具"></a>Maven：项目管理工具</h4><p>主要做了两件事：1统一开发规范与工具、2统一管理jar包</p><h4 id="Spring-Bean到底是什么？"><a href="#Spring-Bean到底是什么？" class="headerlink" title="Spring Bean到底是什么？"></a>Spring Bean到底是什么？</h4><p>Bean在Spring和Spring MVC随处可见。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1)Java面向对象，对象有方法和属性，那么就需要对象实例来调用方法和属性（即实例化）；</span><br><span class="line">(2)凡是有方法或属性的类都需要实例化，这样才能具象化去使用这些方法和属性；</span><br><span class="line">(3)规律：凡是子类及带有方法或属性的类都要加上注册Bean到Spring IoC的注解；</span><br><span class="line">（@Component , @Repository , @ Controller , @Service , @Configration）</span><br><span class="line">(4)把Bean理解为类的代理人（实际上是通过反射、代理来实现的），这样它就能代表类拥有该有的东西了。</span><br><span class="line">(5)微博@某某，对方会优先看到这条信息，并给你反馈。在Spring中，标识一个@符号，那么Spring就会来看看，并从这里拿到一个Bean注册或给出一个Bean使用</span><br></pre></td></tr></table></figure><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><p>Redis是高性能的key-value数据库，特点：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.数据持久化，可以将内存中数据保存在磁盘中，重启时可以再次加载使用</span><br><span class="line">2.不仅仅支持简单的key-value形式，同时还提供list、set、hash等结构的存储</span><br><span class="line">3.master-slave模式的数据备份</span><br></pre></td></tr></table></figure><p>性能极高、丰富的数据类型、原子性</p><h4 id="QueryWrapper"><a href="#QueryWrapper" class="headerlink" title="QueryWrapper"></a>QueryWrapper</h4><p>queryWrapper是mybatis plus中实现查询的对象封装操作<br><img src="https://yzhangwh-1253708708.cos.ap-shanghai.myqcloud.com/%E5%BC%80%E5%A4%A7%E4%B8%80%E5%91%A8%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95/queryWapper.png"></p><h4 id="寻找文件"><a href="#寻找文件" class="headerlink" title="寻找文件"></a>寻找文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># mdfind -name 文件名称</span><br></pre></td></tr></table></figure><h4 id="启动vue"><a href="#启动vue" class="headerlink" title="启动vue"></a>启动vue</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># cd myvue</span><br><span class="line"># npm run dev</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在研究生开学之前，来到上开大进行实习以充实提高自己。记录一下这一个周的学习情况。&lt;/p&gt;
&lt;h2 id=&quot;1-项目介绍&quot;&gt;&lt;a href=&quot;#1-项目介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 项目介绍&quot;&gt;&lt;/a&gt;1. 项目介绍&lt;/h2&gt;&lt;p&gt;项目名称</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>我的信息</title>
    <link href="http://example.com/2021/07/20/%E6%88%91%E7%9A%84%E4%BF%A1%E6%81%AF_%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0/"/>
    <id>http://example.com/2021/07/20/%E6%88%91%E7%9A%84%E4%BF%A1%E6%81%AF_%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0/</id>
    <published>2021-07-20T04:21:00.637Z</published>
    <updated>2021-07-22T02:59:15.755Z</updated>
    
    <content type="html"><![CDATA[<p><strong>个人信息</strong></p><table><thead><tr><th><img width=200/></th><th><img width=200/></th><th><img width=200/></th></tr></thead><tbody><tr><td>姓名：Xander</td><td>性别：男</td><td>民族：汉</td></tr><tr><td>籍贯：山东烟台</td><td>居住地：上海</td><td>年龄：26</td></tr><tr><td>手机：176****5045</td><td>邮箱：<a href="mailto:&#121;&#x7a;&#x68;&#x61;&#x6e;&#103;&#119;&#104;&#64;&#x31;&#50;&#x36;&#46;&#99;&#111;&#109;">&#121;&#x7a;&#x68;&#x61;&#x6e;&#103;&#119;&#104;&#64;&#x31;&#50;&#x36;&#46;&#99;&#111;&#109;</a></td><td></td></tr></tbody></table><p><strong>教育背景</strong></p><p><strong>项目经历</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;个人信息&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img width=200/&gt;&lt;/th&gt;
&lt;th&gt;&lt;img width=200/&gt;&lt;/th&gt;
&lt;th&gt;&lt;img width=200/&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thea</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SpringBoot、SpringCloud学习记录</title>
    <link href="http://example.com/2021/07/20/Spring%20Boot%E3%80%81Spring%20Cloud%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2021/07/20/Spring%20Boot%E3%80%81Spring%20Cloud%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2021-07-20T02:16:25.803Z</published>
    <updated>2021-07-22T02:58:46.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Spring-Boot"><a href="#1-Spring-Boot" class="headerlink" title="1. Spring Boot"></a>1. Spring Boot</h2><p>简单步骤</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1)建立实体类，跟数据库表字段保持一致        #entity包中只做映射</span><br><span class="line">(2)建立mapper接口，定义要操作数据库的动作</span><br><span class="line">(3)建立mapper的xml文件，写具体的SQL语句</span><br><span class="line">(4)建立service类，处理业务逻辑</span><br><span class="line">(5)在controller类中展示处理结果           #Controller提供访问入口</span><br></pre></td></tr></table></figure><p>针对此过程，自己写了一段代码demo1：可实现查询本地MySql数据库并将数据传给前端(jason格式)</p><p>注意事项</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1)Pom文件里面添加依赖，如mybatis依赖</span><br><span class="line">(2)没有@Mapper注解。</span><br><span class="line">   添加依赖：</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">(3)本地数据库启动：在设置中</span><br><span class="line">(4)resources的mapper配置文件xml从一行写</span><br></pre></td></tr></table></figure><h4 id="不同注解的作用"><a href="#不同注解的作用" class="headerlink" title="不同注解的作用"></a>不同注解的作用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@ Controller:</span><br><span class="line">标识一个该类是Spring MVC controller处理器，用来创建处理http请求的对象。</span><br><span class="line">@ RestController:</span><br><span class="line">原来在Controller中返回json需要@ResponseBody来配合，如果直接用RestController来替代Controller就不需要再配置ResponseBody，默认返回json格式。</span><br><span class="line">@ Service:</span><br><span class="line">用于标注业务层组件，说白了就是用注解的方式将这个类注入到Spring配置中。</span><br><span class="line">@ Autowired:</span><br><span class="line">用来装配Bean，都可以写在字段上或者方法上。默认情况下必须要求依赖对象必须存在，如果允许NULL值，可以@ Autowired(required=false)</span><br><span class="line">@ Resource:</span><br><span class="line">作用相当于Autowired，只不过Autowired是按byType自动注入，而Resource默认按byName自动注入罢了。</span><br><span class="line">@ GetMapping:</span><br><span class="line">用于处理请求方法的get类型</span><br></pre></td></tr></table></figure><h2 id="2-Spring-Cloud"><a href="#2-Spring-Cloud" class="headerlink" title="2. Spring Cloud"></a>2. Spring Cloud</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Provider/Producer：暴露服务的服务提供方</span><br><span class="line">Consumer/Customer：调用远程服务的服务消费方</span><br><span class="line">Eureka Server：服务注册中心和服务发现中心</span><br></pre></td></tr></table></figure><p><img src="https://yzhangwh-1253708708.cos.ap-shanghai.myqcloud.com/%E5%BC%80%E5%A4%A7%E4%B8%80%E5%91%A8%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95/springcloud1.png"><br>服务注册：将服务所在的主机、端口、版本号、通信协议等信息登记到注册中心。<br>服务发现：服务消费者向注册中心请求已经登记的服务列表，然后得到某个服务的..信息，从而实现对具体服务的调用。<br><img src="https://yzhangwh-1253708708.cos.ap-shanghai.myqcloud.com/%E5%BC%80%E5%A4%A7%E4%B8%80%E5%91%A8%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95/springCloud.png"></p><p>其他相关未做过多了解</p><h4 id="Eureka注册中心高可用集群"><a href="#Eureka注册中心高可用集群" class="headerlink" title="Eureka注册中心高可用集群"></a>Eureka注册中心高可用集群</h4><h4 id="客户端负载均衡Ribbon"><a href="#客户端负载均衡Ribbon" class="headerlink" title="客户端负载均衡Ribbon"></a>客户端负载均衡Ribbon</h4><h4 id="熔断器"><a href="#熔断器" class="headerlink" title="熔断器"></a>熔断器</h4><p>就是当被调用方没有响应时，调用方直接返回一个错误响应即可，而不是长时间的等待，这样避免调用时因为等待而线程一直得不到释放，避免故障在分布式系统间蔓延。<br>使用熔断器Hystrix只需要简单两步，P26</p><p>负载均衡和服务熔断都是Spring cloud中进行微服务开发非常基础的组件，而且一般使用过程中都是同时出现的，配置也非常相似，每次开发都有很多相同的代码，因为整合了两个组件。</p><h4 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h4><h4 id="API网关Zuul"><a href="#API网关Zuul" class="headerlink" title="API网关Zuul"></a>API网关Zuul</h4><p>P37（管理接口、权限验证）</p><h4 id="Spring-Cloud-Config"><a href="#Spring-Cloud-Config" class="headerlink" title="Spring Cloud Config"></a>Spring Cloud Config</h4><p>P45（对各个分布式项目的配置文件的统一管理），搭建配置中心服务端、客户端</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">``` </span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-Spring-Boot&quot;&gt;&lt;a href=&quot;#1-Spring-Boot&quot; class=&quot;headerlink&quot; title=&quot;1. Spring Boot&quot;&gt;&lt;/a&gt;1. Spring Boot&lt;/h2&gt;&lt;p&gt;简单步骤&lt;/p&gt;
&lt;figure class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Mac下搭建我的博客</title>
    <link href="http://example.com/2021/07/19/Mac%E4%B8%8B%E6%90%AD%E5%BB%BA%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2021/07/19/Mac%E4%B8%8B%E6%90%AD%E5%BB%BA%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/</id>
    <published>2021-07-19T07:19:10.748Z</published>
    <updated>2021-07-22T02:40:05.480Z</updated>
    
    <content type="html"><![CDATA[<p>萌生写blog的想法，花费半天时间使用Hexo、GitHub Pages来搭建自己的个性化博客。</p><h2 id="1-GitHub-Pages"><a href="#1-GitHub-Pages" class="headerlink" title="1. GitHub Pages"></a>1. GitHub Pages</h2><h3 id="1-GitHub账号注册"><a href="#1-GitHub账号注册" class="headerlink" title="(1) GitHub账号注册"></a>(1) GitHub账号注册</h3><p>注册过程省略</p><h3 id="2-创建新的仓库"><a href="#2-创建新的仓库" class="headerlink" title="(2) 创建新的仓库"></a>(2) 创建新的仓库</h3><p>点击右上角头像，选择Your repositories；新界面上选择New,如下填写，Create repository。</p><p><img src="https://yzhangwh-1253708708.cos.ap-shanghai.myqcloud.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/png1.png"></p><h3 id="3-配置SSH-Keys"><a href="#3-配置SSH-Keys" class="headerlink" title="(3) 配置SSH Keys"></a>(3) 配置SSH Keys</h3><p>打开终端，输入命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># cd ~/.ssh</span><br></pre></td></tr></table></figure><p>如果提示 No such file or directory 说明是第一次使用 git。<br>接下来生成新的SSH Keys</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ssh-keygen -t rsa -C &quot;yzhangwh@126.com&quot;</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车&gt;</span><br><span class="line">Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;&lt;如不想设置密码可直接回车表示为空&gt;</span><br><span class="line">Enter same passphrase again:&lt;再次输入加密串&gt;&lt;接着回车确认&gt;</span><br></pre></td></tr></table></figure><p>接下来，将SSH key添加到GitHub<br>打开本地生成的.ssh/id_rsa.pub（若看不到，则需显示隐藏文件）,准确复制文件中所有内容。然后进入github主页，点击右上角头像进入settings，选择SSH and GPG keys，再点击New SSH Key。将内容复制进key，title可以为空。最后Add SSH key。<br>测试是否成功</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ssh -T git@GitHub.com</span><br></pre></td></tr></table></figure><p>接下来会出现</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The authenticity of host &#x27;GitHub.com (207.97.227.239)&#x27; can&#x27;t be established.</span><br><span class="line">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?&lt;输入yes&gt;</span><br><span class="line">Hi 你的用户名! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p>代表SSH key添加成功<br>接下来测试github pages是否创建成功</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># echo &quot;# GitZWH-hub.github.io&quot; &gt;&gt; README.md</span><br><span class="line"># git init    </span><br><span class="line"># git add README.md</span><br><span class="line"># git commit -m &quot;first commit&quot;</span><br><span class="line"># git remote add origin https://github.com/GitZWH-hub/GitZWH-hub.github.io.git</span><br><span class="line"># git push -u origin master</span><br></pre></td></tr></table></figure><p>之后浏览器中输入 GitZWH-hub.github.io，如果成功出现页面，则GitHub Pages配置成功。</p><h2 id="2-Hexo"><a href="#2-Hexo" class="headerlink" title="2. Hexo"></a>2. Hexo</h2><h3 id="1-Node-js安装"><a href="#1-Node-js安装" class="headerlink" title="(1) Node.js安装"></a>(1) Node.js安装</h3><p>检查是否有brew</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># brew -v</span><br></pre></td></tr></table></figure><p>如果顺利显示版本号，说明homebrew已经安装。否则，输入以下命令进行安装：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; </span><br></pre></td></tr></table></figure><p>安装Node.js</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># brew link node</span><br><span class="line"># brew uninstall node</span><br><span class="line"># brew install node</span><br></pre></td></tr></table></figure><h3 id="2-Hexo安装"><a href="#2-Hexo安装" class="headerlink" title="(2) Hexo安装"></a>(2) Hexo安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="3-Hexo建站"><a href="#3-Hexo建站" class="headerlink" title="(3) Hexo建站"></a>(3) Hexo建站</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># hexo init MyGitBlog</span><br><span class="line"># cd MyBigBlog</span><br><span class="line"># npm install</span><br></pre></td></tr></table></figure><h3 id="4-Hexo测试"><a href="#4-Hexo测试" class="headerlink" title="(4) Hexo测试"></a>(4) Hexo测试</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># cd MyGitBlog</span><br><span class="line"># hexo clean</span><br><span class="line"># hexo g</span><br><span class="line"># hexo s</span><br></pre></td></tr></table></figure><p>如果出现以下信息，则成功。可进入本地浏览器查看<a href="http://localhost:4000/">localhost:4000</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><h3 id="5-Hexo部署到Git"><a href="#5-Hexo部署到Git" class="headerlink" title="(5) Hexo部署到Git"></a>(5) Hexo部署到Git</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>修改 _config.yml 文件中的配置如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/GitZWH-hub/GitZWH-Hub.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>⚠️注意：所有的冒号后面都严格要求有一个空格<br>继续执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># hexo clean</span><br><span class="line"># hexo g</span><br><span class="line"># hexo d</span><br></pre></td></tr></table></figure><p>现在，登录到GitHub Pages 上查看博客<a href="https://gitzwh-hub.github.io/">GitHub Pages</a>。<br>此时，应该可以看到和本地上看到的一样的画面了。</p><h2 id="3-设置主题"><a href="#3-设置主题" class="headerlink" title="3. 设置主题"></a>3. 设置主题</h2><p>这里选用next主题，也可以使用butterfly等主题。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># cd MyGitBlog</span><br><span class="line"># git clone https://github.com/iissnan/hexo-theme-next themes/next  #克隆next主题到本地</span><br></pre></td></tr></table></figure><p>在站点根目录下的配置文件 _config.yml 中，找到 theme字段，并将其值更改为 next。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: next  </span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># hexo s</span><br></pre></td></tr></table></figure><p>本地查看 <a href="http://localhost:4000/">localhost:4000</a></p><p><img src="https://yzhangwh-1253708708.cos.ap-shanghai.myqcloud.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/blog_start.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;萌生写blog的想法，花费半天时间使用Hexo、GitHub Pages来搭建自己的个性化博客。&lt;/p&gt;
&lt;h2 id=&quot;1-GitHub-Pages&quot;&gt;&lt;a href=&quot;#1-GitHub-Pages&quot; class=&quot;headerlink&quot; title=&quot;1. GitHu</summary>
      
    
    
    
    
  </entry>
  
</feed>
